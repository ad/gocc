// protoc -I. --go_opt=paths=source_relative --go_out=plugins=grpc:. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: gozond.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZondUUID string `protobuf:"bytes,1,opt,name=ZondUUID,proto3" json:"ZondUUID,omitempty"`
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gozond_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gozond_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_gozond_proto_rawDescGZIP(), []int{0}
}

func (x *InitRequest) GetZondUUID() string {
	if x != nil {
		return x.ZondUUID
	}
	return ""
}

type InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *InitResponse) Reset() {
	*x = InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gozond_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitResponse) ProtoMessage() {}

func (x *InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gozond_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitResponse.ProtoReflect.Descriptor instead.
func (*InitResponse) Descriptor() ([]byte, []int) {
	return file_gozond_proto_rawDescGZIP(), []int{1}
}

func (x *InitResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZondUUID string `protobuf:"bytes,1,opt,name=ZondUUID,proto3" json:"ZondUUID,omitempty"`
	Action   string `protobuf:"bytes,2,opt,name=Action,proto3" json:"Action,omitempty"`
	Param    string `protobuf:"bytes,3,opt,name=Param,proto3" json:"Param,omitempty"`
	Result   string `protobuf:"bytes,4,opt,name=Result,proto3" json:"Result,omitempty"`
	UUID     string `protobuf:"bytes,5,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gozond_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gozond_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_gozond_proto_rawDescGZIP(), []int{2}
}

func (x *TaskRequest) GetZondUUID() string {
	if x != nil {
		return x.ZondUUID
	}
	return ""
}

func (x *TaskRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TaskRequest) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *TaskRequest) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *TaskRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type TaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   string `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	ZondUUID string `protobuf:"bytes,2,opt,name=ZondUUID,proto3" json:"ZondUUID,omitempty"`
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gozond_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gozond_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_gozond_proto_rawDescGZIP(), []int{3}
}

func (x *TaskResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskResponse) GetZondUUID() string {
	if x != nil {
		return x.ZondUUID
	}
	return ""
}

type BlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZondUUID string `protobuf:"bytes,1,opt,name=ZondUUID,proto3" json:"ZondUUID,omitempty"`
	UUID     string `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *BlockRequest) Reset() {
	*x = BlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gozond_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRequest) ProtoMessage() {}

func (x *BlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gozond_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRequest.ProtoReflect.Descriptor instead.
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return file_gozond_proto_rawDescGZIP(), []int{4}
}

func (x *BlockRequest) GetZondUUID() string {
	if x != nil {
		return x.ZondUUID
	}
	return ""
}

func (x *BlockRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type BlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *BlockResponse) Reset() {
	*x = BlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gozond_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResponse) ProtoMessage() {}

func (x *BlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gozond_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResponse.ProtoReflect.Descriptor instead.
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return file_gozond_proto_rawDescGZIP(), []int{5}
}

func (x *BlockResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZondUUID string `protobuf:"bytes,1,opt,name=ZondUUID,proto3" json:"ZondUUID,omitempty"`
	Action   string `protobuf:"bytes,2,opt,name=Action,proto3" json:"Action,omitempty"`
	Param    string `protobuf:"bytes,3,opt,name=Param,proto3" json:"Param,omitempty"`
	Result   string `protobuf:"bytes,4,opt,name=Result,proto3" json:"Result,omitempty"`
	UUID     string `protobuf:"bytes,5,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *ResultRequest) Reset() {
	*x = ResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gozond_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultRequest) ProtoMessage() {}

func (x *ResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gozond_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultRequest.ProtoReflect.Descriptor instead.
func (*ResultRequest) Descriptor() ([]byte, []int) {
	return file_gozond_proto_rawDescGZIP(), []int{6}
}

func (x *ResultRequest) GetZondUUID() string {
	if x != nil {
		return x.ZondUUID
	}
	return ""
}

func (x *ResultRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ResultRequest) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *ResultRequest) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ResultRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ResultResponse) Reset() {
	*x = ResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gozond_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultResponse) ProtoMessage() {}

func (x *ResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gozond_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultResponse.ProtoReflect.Descriptor instead.
func (*ResultResponse) Descriptor() ([]byte, []int) {
	return file_gozond_proto_rawDescGZIP(), []int{7}
}

func (x *ResultResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZondUUID string `protobuf:"bytes,1,opt,name=ZondUUID,proto3" json:"ZondUUID,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gozond_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gozond_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_gozond_proto_rawDescGZIP(), []int{8}
}

func (x *PingRequest) GetZondUUID() string {
	if x != nil {
		return x.ZondUUID
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZondUUID string `protobuf:"bytes,1,opt,name=ZondUUID,proto3" json:"ZondUUID,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gozond_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gozond_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_gozond_proto_rawDescGZIP(), []int{9}
}

func (x *PingResponse) GetZondUUID() string {
	if x != nil {
		return x.ZondUUID
	}
	return ""
}

var File_gozond_proto protoreflect.FileDescriptor

var file_gozond_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x67, 0x6f, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x67, 0x6f, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x22, 0x29, 0x0a, 0x0b, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x64,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x5a, 0x6f, 0x6e, 0x64,
	0x55, 0x55, 0x49, 0x44, 0x22, 0x26, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x83, 0x01, 0x0a,
	0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x5a, 0x6f, 0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x5a, 0x6f, 0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x22, 0x42, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x5a, 0x6f,
	0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x5a, 0x6f,
	0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x22, 0x3e, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x64, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x5a, 0x6f, 0x6e, 0x64, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x85, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x5a, 0x6f, 0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x28, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x29, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x5a, 0x6f, 0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x22, 0x2a, 0x0a, 0x0c,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x5a, 0x6f, 0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x5a, 0x6f, 0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x32, 0xca, 0x02, 0x0a, 0x04, 0x5a, 0x6f, 0x6e,
	0x64, 0x12, 0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x7a, 0x6f,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x3d, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x7a, 0x6f, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x40, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x7a, 0x6f, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6f, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x43, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x2e, 0x67, 0x6f,
	0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x7a, 0x6f, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x1a, 0x5a, 0x18, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x2f, 0x67, 0x6f, 0x63, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gozond_proto_rawDescOnce sync.Once
	file_gozond_proto_rawDescData = file_gozond_proto_rawDesc
)

func file_gozond_proto_rawDescGZIP() []byte {
	file_gozond_proto_rawDescOnce.Do(func() {
		file_gozond_proto_rawDescData = protoimpl.X.CompressGZIP(file_gozond_proto_rawDescData)
	})
	return file_gozond_proto_rawDescData
}

var file_gozond_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_gozond_proto_goTypes = []interface{}{
	(*InitRequest)(nil),    // 0: gozond.v1.InitRequest
	(*InitResponse)(nil),   // 1: gozond.v1.InitResponse
	(*TaskRequest)(nil),    // 2: gozond.v1.TaskRequest
	(*TaskResponse)(nil),   // 3: gozond.v1.TaskResponse
	(*BlockRequest)(nil),   // 4: gozond.v1.BlockRequest
	(*BlockResponse)(nil),  // 5: gozond.v1.BlockResponse
	(*ResultRequest)(nil),  // 6: gozond.v1.ResultRequest
	(*ResultResponse)(nil), // 7: gozond.v1.ResultResponse
	(*PingRequest)(nil),    // 8: gozond.v1.PingRequest
	(*PingResponse)(nil),   // 9: gozond.v1.PingResponse
}
var file_gozond_proto_depIdxs = []int32{
	0, // 0: gozond.v1.Zond.Init:input_type -> gozond.v1.InitRequest
	2, // 1: gozond.v1.Zond.Task:input_type -> gozond.v1.TaskRequest
	4, // 2: gozond.v1.Zond.Block:input_type -> gozond.v1.BlockRequest
	6, // 3: gozond.v1.Zond.Result:input_type -> gozond.v1.ResultRequest
	8, // 4: gozond.v1.Zond.Ping:input_type -> gozond.v1.PingRequest
	1, // 5: gozond.v1.Zond.Init:output_type -> gozond.v1.InitResponse
	3, // 6: gozond.v1.Zond.Task:output_type -> gozond.v1.TaskResponse
	5, // 7: gozond.v1.Zond.Block:output_type -> gozond.v1.BlockResponse
	7, // 8: gozond.v1.Zond.Result:output_type -> gozond.v1.ResultResponse
	9, // 9: gozond.v1.Zond.Ping:output_type -> gozond.v1.PingResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gozond_proto_init() }
func file_gozond_proto_init() {
	if File_gozond_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gozond_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gozond_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gozond_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gozond_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gozond_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gozond_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gozond_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gozond_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gozond_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gozond_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gozond_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gozond_proto_goTypes,
		DependencyIndexes: file_gozond_proto_depIdxs,
		MessageInfos:      file_gozond_proto_msgTypes,
	}.Build()
	File_gozond_proto = out.File
	file_gozond_proto_rawDesc = nil
	file_gozond_proto_goTypes = nil
	file_gozond_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZondClient is the client API for Zond service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZondClient interface {
	Init(ctx context.Context, opts ...grpc.CallOption) (Zond_InitClient, error)
	Task(ctx context.Context, opts ...grpc.CallOption) (Zond_TaskClient, error)
	Block(ctx context.Context, opts ...grpc.CallOption) (Zond_BlockClient, error)
	Result(ctx context.Context, opts ...grpc.CallOption) (Zond_ResultClient, error)
	Ping(ctx context.Context, opts ...grpc.CallOption) (Zond_PingClient, error)
}

type zondClient struct {
	cc grpc.ClientConnInterface
}

func NewZondClient(cc grpc.ClientConnInterface) ZondClient {
	return &zondClient{cc}
}

func (c *zondClient) Init(ctx context.Context, opts ...grpc.CallOption) (Zond_InitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zond_serviceDesc.Streams[0], "/gozond.v1.Zond/Init", opts...)
	if err != nil {
		return nil, err
	}
	x := &zondInitClient{stream}
	return x, nil
}

type Zond_InitClient interface {
	Send(*InitRequest) error
	Recv() (*InitResponse, error)
	grpc.ClientStream
}

type zondInitClient struct {
	grpc.ClientStream
}

func (x *zondInitClient) Send(m *InitRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zondInitClient) Recv() (*InitResponse, error) {
	m := new(InitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zondClient) Task(ctx context.Context, opts ...grpc.CallOption) (Zond_TaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zond_serviceDesc.Streams[1], "/gozond.v1.Zond/Task", opts...)
	if err != nil {
		return nil, err
	}
	x := &zondTaskClient{stream}
	return x, nil
}

type Zond_TaskClient interface {
	Send(*TaskRequest) error
	Recv() (*TaskResponse, error)
	grpc.ClientStream
}

type zondTaskClient struct {
	grpc.ClientStream
}

func (x *zondTaskClient) Send(m *TaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zondTaskClient) Recv() (*TaskResponse, error) {
	m := new(TaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zondClient) Block(ctx context.Context, opts ...grpc.CallOption) (Zond_BlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zond_serviceDesc.Streams[2], "/gozond.v1.Zond/Block", opts...)
	if err != nil {
		return nil, err
	}
	x := &zondBlockClient{stream}
	return x, nil
}

type Zond_BlockClient interface {
	Send(*BlockRequest) error
	Recv() (*BlockResponse, error)
	grpc.ClientStream
}

type zondBlockClient struct {
	grpc.ClientStream
}

func (x *zondBlockClient) Send(m *BlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zondBlockClient) Recv() (*BlockResponse, error) {
	m := new(BlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zondClient) Result(ctx context.Context, opts ...grpc.CallOption) (Zond_ResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zond_serviceDesc.Streams[3], "/gozond.v1.Zond/Result", opts...)
	if err != nil {
		return nil, err
	}
	x := &zondResultClient{stream}
	return x, nil
}

type Zond_ResultClient interface {
	Send(*ResultRequest) error
	Recv() (*ResultResponse, error)
	grpc.ClientStream
}

type zondResultClient struct {
	grpc.ClientStream
}

func (x *zondResultClient) Send(m *ResultRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zondResultClient) Recv() (*ResultResponse, error) {
	m := new(ResultResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zondClient) Ping(ctx context.Context, opts ...grpc.CallOption) (Zond_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zond_serviceDesc.Streams[4], "/gozond.v1.Zond/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &zondPingClient{stream}
	return x, nil
}

type Zond_PingClient interface {
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type zondPingClient struct {
	grpc.ClientStream
}

func (x *zondPingClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zondPingClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZondServer is the server API for Zond service.
type ZondServer interface {
	Init(Zond_InitServer) error
	Task(Zond_TaskServer) error
	Block(Zond_BlockServer) error
	Result(Zond_ResultServer) error
	Ping(Zond_PingServer) error
}

// UnimplementedZondServer can be embedded to have forward compatible implementations.
type UnimplementedZondServer struct {
}

func (*UnimplementedZondServer) Init(Zond_InitServer) error {
	return status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedZondServer) Task(Zond_TaskServer) error {
	return status.Errorf(codes.Unimplemented, "method Task not implemented")
}
func (*UnimplementedZondServer) Block(Zond_BlockServer) error {
	return status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (*UnimplementedZondServer) Result(Zond_ResultServer) error {
	return status.Errorf(codes.Unimplemented, "method Result not implemented")
}
func (*UnimplementedZondServer) Ping(Zond_PingServer) error {
	return status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterZondServer(s *grpc.Server, srv ZondServer) {
	s.RegisterService(&_Zond_serviceDesc, srv)
}

func _Zond_Init_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZondServer).Init(&zondInitServer{stream})
}

type Zond_InitServer interface {
	Send(*InitResponse) error
	Recv() (*InitRequest, error)
	grpc.ServerStream
}

type zondInitServer struct {
	grpc.ServerStream
}

func (x *zondInitServer) Send(m *InitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zondInitServer) Recv() (*InitRequest, error) {
	m := new(InitRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Zond_Task_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZondServer).Task(&zondTaskServer{stream})
}

type Zond_TaskServer interface {
	Send(*TaskResponse) error
	Recv() (*TaskRequest, error)
	grpc.ServerStream
}

type zondTaskServer struct {
	grpc.ServerStream
}

func (x *zondTaskServer) Send(m *TaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zondTaskServer) Recv() (*TaskRequest, error) {
	m := new(TaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Zond_Block_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZondServer).Block(&zondBlockServer{stream})
}

type Zond_BlockServer interface {
	Send(*BlockResponse) error
	Recv() (*BlockRequest, error)
	grpc.ServerStream
}

type zondBlockServer struct {
	grpc.ServerStream
}

func (x *zondBlockServer) Send(m *BlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zondBlockServer) Recv() (*BlockRequest, error) {
	m := new(BlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Zond_Result_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZondServer).Result(&zondResultServer{stream})
}

type Zond_ResultServer interface {
	Send(*ResultResponse) error
	Recv() (*ResultRequest, error)
	grpc.ServerStream
}

type zondResultServer struct {
	grpc.ServerStream
}

func (x *zondResultServer) Send(m *ResultResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zondResultServer) Recv() (*ResultRequest, error) {
	m := new(ResultRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Zond_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZondServer).Ping(&zondPingServer{stream})
}

type Zond_PingServer interface {
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type zondPingServer struct {
	grpc.ServerStream
}

func (x *zondPingServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zondPingServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Zond_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gozond.v1.Zond",
	HandlerType: (*ZondServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Init",
			Handler:       _Zond_Init_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Task",
			Handler:       _Zond_Task_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Block",
			Handler:       _Zond_Block_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Result",
			Handler:       _Zond_Result_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Ping",
			Handler:       _Zond_Ping_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gozond.proto",
}
